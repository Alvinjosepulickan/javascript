WEBVTT

1
00:00:01.856 --> 00:00:03.168
<v Instructor>In this lecture,</v>

2
00:00:03.168 --> 00:00:04.904
we'll take care of giving the numbers

3
00:00:04.904 --> 00:00:08.655
that we display on the UI a proper formatting,

4
00:00:08.655 --> 00:00:12.738
so that they are easier to read, and look better.

5
00:00:13.702 --> 00:00:14.953
And so in this lecture,

6
00:00:14.953 --> 00:00:18.184
you're gonna learn how to use different string methods

7
00:00:18.184 --> 00:00:19.920
to manipulate strings.

8
00:00:19.920 --> 00:00:21.003
Easy as that.

9
00:00:22.984 --> 00:00:26.320
So this is the look and feel that we're trying to achieve

10
00:00:26.320 --> 00:00:28.394
with our numbers on the UI,

11
00:00:28.394 --> 00:00:30.667
and there are basically three rules.

12
00:00:30.667 --> 00:00:33.305
And the first rule is that all numbers

13
00:00:33.305 --> 00:00:37.097
have a decimal part with exactly two numbers,

14
00:00:37.097 --> 00:00:40.056
even if they are originally integers.

15
00:00:40.056 --> 00:00:44.223
So for example, this 1500 here is written as 1500.00.

16
00:00:47.736 --> 00:00:49.473
And that is so that all the numbers

17
00:00:49.473 --> 00:00:51.489
are always equally aligned,

18
00:00:51.489 --> 00:00:53.065
so in this case here, for example,

19
00:00:53.065 --> 00:00:55.232
we have -900.00 and 98.63,

20
00:00:58.472 --> 00:01:02.041
and so you see they're all aligned.

21
00:01:02.041 --> 00:01:05.096
Now the second rule is that all the expenses

22
00:01:05.096 --> 00:01:07.920
always have this minus sign here in front of them,

23
00:01:07.920 --> 00:01:09.169
and then the space.

24
00:01:09.169 --> 00:01:11.064
So here, as well as here,

25
00:01:11.064 --> 00:01:13.872
while all the income numbers are positive numbers,

26
00:01:13.872 --> 00:01:17.728
so they have this plus sign, and also this space.

27
00:01:17.728 --> 00:01:21.024
And the third rule is that if a number is in the thousands,

28
00:01:21.024 --> 00:01:22.872
then we have this comma separator here,

29
00:01:22.872 --> 00:01:25.640
like in this case here, or also here.

30
00:01:25.640 --> 00:01:29.680
So these three rules is what we're gonna implement now.

31
00:01:29.680 --> 00:01:32.721
Okay, so let's go back to our app file,

32
00:01:32.721 --> 00:01:34.337
and what we're gonna do here

33
00:01:34.337 --> 00:01:37.633
is to simply add a method to the UI controller,

34
00:01:37.633 --> 00:01:39.984
and then each time that we display a number

35
00:01:39.984 --> 00:01:41.376
on the user interface,

36
00:01:41.376 --> 00:01:45.314
we call that method, and input the number into that method,

37
00:01:45.314 --> 00:01:48.459
and then output the formative number, okay?

38
00:01:48.459 --> 00:01:52.626
So let's edit somewhere down here, let's say here, okay.

39
00:01:53.499 --> 00:01:54.916
So, formatNumber,

40
00:01:57.578 --> 00:02:00.098
and then the input that we receive is, of course,

41
00:02:00.098 --> 00:02:02.363
the number that we want to format.

42
00:02:02.363 --> 00:02:04.283
And then we also need the type.

43
00:02:04.283 --> 00:02:06.593
So if it's an expense or an income,

44
00:02:06.593 --> 00:02:08.576
because remember, if it's an expense,

45
00:02:08.576 --> 00:02:11.291
we want to prepend the minus sign,

46
00:02:11.291 --> 00:02:15.448
and if it's an income, we want to add the plus sign.

47
00:02:15.448 --> 00:02:17.352
So we need type here, as well,

48
00:02:17.352 --> 00:02:22.060
and actually, this is not how it should be done right.

49
00:02:22.060 --> 00:02:24.977
So, of course, here's the function.

50
00:02:26.405 --> 00:02:28.072
So now it's correct.

51
00:02:30.716 --> 00:02:33.852
So let's write our rules here.

52
00:02:33.852 --> 00:02:36.769
So plus or minus before the number,

53
00:02:40.756 --> 00:02:43.006
exactly two decimal points,

54
00:02:45.309 --> 00:02:48.392
and a comma separating the thousands.

55
00:02:52.229 --> 00:02:53.517
Let's see some examples.

56
00:02:53.517 --> 00:02:55.684
Imagine we have 2310.4567,

57
00:03:00.013 --> 00:03:03.846
so this should become +, space, 2,310.46.

58
00:03:08.725 --> 00:03:12.892
So we're going to round this decimal part here to 46, right?

59
00:03:14.389 --> 00:03:18.205
Or another example, let's say we have 2000, simply,

60
00:03:18.205 --> 00:03:21.872
and this is going to become + 2,000.00.

61
00:03:24.619 --> 00:03:26.363
Okay, so this is the formatted 2000,

62
00:03:26.363 --> 00:03:30.190
so this looks much nicer, and it's easier to read.

63
00:03:30.190 --> 00:03:32.435
All right, and how are we going to do that?

64
00:03:32.435 --> 00:03:34.332
Now, the first thing that I want to do

65
00:03:34.332 --> 00:03:37.435
is to calculate the absolute part of the number,

66
00:03:37.435 --> 00:03:40.764
so this means that, for example, if it's minus 2000,

67
00:03:40.764 --> 00:03:43.219
that it should be, simply, 2000.

68
00:03:43.219 --> 00:03:45.484
So I want to just work with the number,

69
00:03:45.484 --> 00:03:48.814
and without the design of the number, okay?

70
00:03:48.814 --> 00:03:51.655
So I'm saying num should be,

71
00:03:51.655 --> 00:03:53.839
and once again, the Math object,

72
00:03:53.839 --> 00:03:57.518
and then .abs, which stands for absolute.

73
00:03:57.518 --> 00:04:00.902
So the absolute simply removes the sign off the number.

74
00:04:00.902 --> 00:04:04.449
And here I'm gonna input the number that we receive

75
00:04:04.449 --> 00:04:06.150
as an argument, right?

76
00:04:06.150 --> 00:04:10.126
And this is also where I store the result of this,

77
00:04:10.126 --> 00:04:11.391
and I can of course do this,

78
00:04:11.391 --> 00:04:12.798
because, as we know,

79
00:04:12.798 --> 00:04:16.934
this is treated a regular variable here in our function.

80
00:04:16.934 --> 00:04:19.257
So by doing this calculation here,

81
00:04:19.257 --> 00:04:22.941
I'm basically overriding the num argument.

82
00:04:22.941 --> 00:04:23.821
All right,

83
00:04:23.821 --> 00:04:28.297
so the absolute number is now stored in this num variable.

84
00:04:28.297 --> 00:04:31.083
Now, the next step is to actually take care

85
00:04:31.083 --> 00:04:33.938
of the number of the decimal numbers.

86
00:04:33.938 --> 00:04:34.830
And there is a very handy number method

87
00:04:34.830 --> 00:04:38.997
that we can use for that, which is called toFixed.

88
00:04:40.413 --> 00:04:44.580
So I can simply say num = num.toFixed, and then 2.

89
00:04:50.209 --> 00:04:53.509
Now, this is not a method of the Math object,

90
00:04:53.509 --> 00:04:55.540
such as the abs method

91
00:04:55.540 --> 00:04:57.604
that we used before here for absolute,

92
00:04:57.604 --> 00:05:01.300
but instead, this is a method of the number prototype,

93
00:05:01.300 --> 00:05:03.621
and as I mentioned earlier already,

94
00:05:03.621 --> 00:05:06.260
the strings and numbers can also have methods,

95
00:05:06.260 --> 00:05:09.766
even if they are originally primitive data types.

96
00:05:09.766 --> 00:05:12.860
But if we attempt to use methods on them,

97
00:05:12.860 --> 00:05:14.256
such as we do here,

98
00:05:14.256 --> 00:05:15.911
so this is a primitive number,

99
00:05:15.911 --> 00:05:18.831
but now, I'm going to use a method here,

100
00:05:18.831 --> 00:05:21.874
then JavaScript automatically converts them to objects,

101
00:05:21.874 --> 00:05:25.398
and then we can use their methods, just like this.

102
00:05:25.398 --> 00:05:26.486
What this does

103
00:05:26.486 --> 00:05:29.535
is to always put exactly two decimal numbers

104
00:05:29.535 --> 00:05:32.597
on the number on which we call the methods,

105
00:05:32.597 --> 00:05:34.772
and that is exactly what we want, right?

106
00:05:34.772 --> 00:05:36.780
So if we input this number here,

107
00:05:36.780 --> 00:05:39.739
it will nicely round it to this number,

108
00:05:39.739 --> 00:05:42.452
and if we put in a number without any decimals,

109
00:05:42.452 --> 00:05:46.644
then it will also add these decimals, such as we have here.

110
00:05:46.644 --> 00:05:47.477
And actually,

111
00:05:47.477 --> 00:05:51.394
let's take a look at that in the console, okay?

112
00:05:52.491 --> 00:05:55.211
And actually, let's go back to the original app

113
00:05:55.211 --> 00:05:57.091
that we were working on, right?

114
00:05:57.091 --> 00:05:58.419
So this one.

115
00:05:58.419 --> 00:06:00.075
So let's now try this.

116
00:06:00.075 --> 00:06:03.176
So if I wrap the number in parentheses,

117
00:06:03.176 --> 00:06:05.093
like, let's say 2.4567,

118
00:06:07.938 --> 00:06:11.438
now I can call the method, toFixed, and 2.

119
00:06:14.703 --> 00:06:16.345
So this gives me a string,

120
00:06:16.345 --> 00:06:18.777
and notice this really is a string,

121
00:06:18.777 --> 00:06:21.235
which is two decimal numbers that we want,

122
00:06:21.235 --> 00:06:22.770
and it rounds it nicely,

123
00:06:22.770 --> 00:06:24.929
because there's a six after the five,

124
00:06:24.929 --> 00:06:27.266
so it gets rounded to six.

125
00:06:27.266 --> 00:06:30.706
And now, if I have just two, for example,

126
00:06:30.706 --> 00:06:34.123
let's see, it's gonna convert it to 2.00.

127
00:06:35.421 --> 00:06:38.646
So exactly the rule that we want, right?

128
00:06:38.646 --> 00:06:40.870
So let's go back.

129
00:06:40.870 --> 00:06:42.367
So after this line here,

130
00:06:42.367 --> 00:06:45.278
we have a string which already respects our rule

131
00:06:45.278 --> 00:06:47.829
with the two decimal numbers.

132
00:06:47.829 --> 00:06:50.821
And once again, I'm storing this into the num variable,

133
00:06:50.821 --> 00:06:53.231
because I don't want this result from here anymore,

134
00:06:53.231 --> 00:06:56.928
so I simply override it into the same variable.

135
00:06:56.928 --> 00:06:58.617
Okay, and now we need to think

136
00:06:58.617 --> 00:07:01.400
about this comma separating the thousands,

137
00:07:01.400 --> 00:07:03.912
and that's gonna be the trickiest part.

138
00:07:03.912 --> 00:07:06.792
So let's start by splitting up this number

139
00:07:06.792 --> 00:07:08.473
into the decimal part,

140
00:07:08.473 --> 00:07:10.040
and the integer part,

141
00:07:10.040 --> 00:07:13.250
and we can do that using the split method on the string,

142
00:07:13.250 --> 00:07:15.533
because remember, this is now a string,

143
00:07:15.533 --> 00:07:18.439
and we already used the split method before actually,

144
00:07:18.439 --> 00:07:20.087
and so it's really easy.

145
00:07:20.087 --> 00:07:23.920
So let's say numSplit, okay, is the num.split.

146
00:07:28.598 --> 00:07:30.180
And the string that we're gonna use

147
00:07:30.180 --> 00:07:34.084
to split the number in two will be the point.

148
00:07:34.084 --> 00:07:36.327
Okay, let me just declare the variable here.

149
00:07:36.327 --> 00:07:37.660
So var numSplit,

150
00:07:40.445 --> 00:07:44.630
so what this will do is to divide this number that we input,

151
00:07:44.630 --> 00:07:46.998
so num, into two parts.

152
00:07:46.998 --> 00:07:50.389
The integer part, for example, 2310,

153
00:07:50.389 --> 00:07:51.900
and then the decimal part,

154
00:07:51.900 --> 00:07:55.661
which will be, in this case here, 46.

155
00:07:55.661 --> 00:07:59.181
And it's gonna be stored in an array, right?

156
00:07:59.181 --> 00:08:02.931
So we can say that integer is the numSplit 0,

157
00:08:06.828 --> 00:08:09.420
so the first element of the array,

158
00:08:09.420 --> 00:08:13.587
and the decimal part is numSplit 1, so the second part.

159
00:08:16.684 --> 00:08:19.772
Now, I need to just declare these variables up here,

160
00:08:19.772 --> 00:08:20.772
int and dec.

161
00:08:22.965 --> 00:08:24.316
All right.

162
00:08:24.316 --> 00:08:27.325
So the decimal part has already been taken care of,

163
00:08:27.325 --> 00:08:30.012
and now we just need to add this comma here,

164
00:08:30.012 --> 00:08:31.969
if we have a thousand.

165
00:08:31.969 --> 00:08:35.818
So let's do that, and we do that using an if else statement,

166
00:08:35.818 --> 00:08:38.937
and remember this int is still a string,

167
00:08:38.937 --> 00:08:41.777
and on a string, such as on an array,

168
00:08:41.777 --> 00:08:45.274
we have access to the length property, okay?

169
00:08:45.274 --> 00:08:46.818
So using length on a string,

170
00:08:46.818 --> 00:08:50.202
it gives us, of course, the length of a string.

171
00:08:50.202 --> 00:08:52.574
So for example, if the string is number,

172
00:08:52.574 --> 00:08:54.221
then it will return six,

173
00:08:54.221 --> 00:08:57.990
because number is made up of six characters.

174
00:08:57.990 --> 00:09:00.853
In this case our string is a number, so basically,

175
00:09:00.853 --> 00:09:05.070
it will give us how many numbers are in our number.

176
00:09:05.070 --> 00:09:06.911
So if we have more than three,

177
00:09:06.911 --> 00:09:10.615
then it's more than a thousand, right?

178
00:09:10.615 --> 00:09:14.320
For example, this 2310, it has four.

179
00:09:14.320 --> 00:09:18.514
So in this case, we need to add the comma, right here.

180
00:09:18.514 --> 00:09:22.997
Now, in here, we are going to use a method called substring,

181
00:09:22.997 --> 00:09:27.186
and substring allows us to only take a part of a string.

182
00:09:27.186 --> 00:09:28.726
So this method is gonna return

183
00:09:28.726 --> 00:09:31.959
simply the part of the string that we want.

184
00:09:31.959 --> 00:09:34.292
So let's say, int.substring,

185
00:09:36.246 --> 00:09:39.079
so it's written like this, substr,

186
00:09:40.200 --> 00:09:42.824
and then in here, the first argument

187
00:09:42.824 --> 00:09:45.264
is the index number where we want to start,

188
00:09:45.264 --> 00:09:49.531
and the second number is how many characters we want.

189
00:09:49.531 --> 00:09:52.098
So imagine that we write 0 and 1,

190
00:09:52.098 --> 00:09:55.272
then this means that we're gonna start at position zero,

191
00:09:55.272 --> 00:09:59.825
so right in the beginning, and read one element.

192
00:09:59.825 --> 00:10:01.720
So imagine it would be this number,

193
00:10:01.720 --> 00:10:05.816
then this end substring would return only the two,

194
00:10:05.816 --> 00:10:10.085
because we start at position zero, and read one number,

195
00:10:10.085 --> 00:10:12.226
so this would return the string 2.

196
00:10:12.226 --> 00:10:15.639
And let me actually save it to the invariable, again,

197
00:10:15.639 --> 00:10:19.078
so again, we're gonna override what's in this variable,

198
00:10:19.078 --> 00:10:20.959
because we don't want it anymore.

199
00:10:20.959 --> 00:10:25.242
We're just interested in the result of this execution.

200
00:10:25.242 --> 00:10:29.008
Okay, so this gives us the first part of the number,

201
00:10:29.008 --> 00:10:31.209
and now we can simply add the comma,

202
00:10:31.209 --> 00:10:33.873
and then take the last three parts, right?

203
00:10:33.873 --> 00:10:35.206
So, really easy.

204
00:10:37.489 --> 00:10:39.489
So we can add the comma,

205
00:10:41.126 --> 00:10:44.478
and then take another substring.

206
00:10:44.478 --> 00:10:48.645
So int.substring, and now we want to start at position 1,

207
00:10:50.987 --> 00:10:53.487
and read three numbers, right?

208
00:10:55.567 --> 00:10:57.424
So let's see, in this case,

209
00:10:57.424 --> 00:11:00.776
we will start at position 1, and then read three numbers.

210
00:11:00.776 --> 00:11:02.359
One, two and three.

211
00:11:03.336 --> 00:11:07.003
So the result of this, if the input is 2310,

212
00:11:09.360 --> 00:11:11.943
then the result would be 2,310.

213
00:11:17.176 --> 00:11:18.936
So it makes sense?

214
00:11:18.936 --> 00:11:21.761
So this is exactly what we want, right?

215
00:11:21.761 --> 00:11:23.355
Well, not really,

216
00:11:23.355 --> 00:11:28.180
because imagine that the number would not be 2310,

217
00:11:28.180 --> 00:11:29.847
but let's say 23510.

218
00:11:32.232 --> 00:11:36.399
Then the output would be simply 2,3510, so a comma here.

219
00:11:40.124 --> 00:11:41.498
So this would be the output,

220
00:11:41.498 --> 00:11:42.898
and that's not what we want, right?

221
00:11:42.898 --> 00:11:45.898
We want the comma in here, not here.

222
00:11:46.951 --> 00:11:50.583
So we cannot simply say that we want to read 1 here,

223
00:11:50.583 --> 00:11:52.270
and then from 1 to 3.

224
00:11:52.270 --> 00:11:54.072
So these numbers are hard coded,

225
00:11:54.072 --> 00:11:57.448
but we actually want to make them more dynamic.

226
00:11:57.448 --> 00:11:59.735
The way we do it is to, again,

227
00:11:59.735 --> 00:12:02.277
use the length property of the string.

228
00:12:02.277 --> 00:12:06.444
If we say int.length - 3, then it's gonna work.

229
00:12:09.042 --> 00:12:10.730
Let me show you why.

230
00:12:10.730 --> 00:12:14.897
So let's go back to this first case here, with 2310.

231
00:12:15.956 --> 00:12:17.389
The length would be four,

232
00:12:17.389 --> 00:12:19.989
and then minus three would be one, right?

233
00:12:19.989 --> 00:12:23.208
And then we would have the one that we had before.

234
00:12:23.208 --> 00:12:27.000
Now, if the number would be this, so 23510,

235
00:12:27.000 --> 00:12:29.104
then the length would be five,

236
00:12:29.104 --> 00:12:31.208
and five minus three would be two,

237
00:12:31.208 --> 00:12:33.958
and then the comma would be here.

238
00:12:35.017 --> 00:12:37.976
So this is what we need, right?

239
00:12:37.976 --> 00:12:40.640
Then we also need to change it here.

240
00:12:40.640 --> 00:12:44.807
So we already know that this is int.length - 3,

241
00:12:48.104 --> 00:12:48.937
and then we want it

242
00:12:48.937 --> 00:12:51.677
all the way to the end of the string, right?

243
00:12:51.677 --> 00:12:53.751
At the end of the string is, of course,

244
00:12:53.751 --> 00:12:56.418
simply the length of the string.

245
00:12:57.909 --> 00:13:00.548
Now this is gonna work for all of the cases,

246
00:13:00.548 --> 00:13:02.308
so let's see with this one.

247
00:13:02.308 --> 00:13:06.172
The length is five, and if we start at five, minus three,

248
00:13:06.172 --> 00:13:07.428
we start at position two.

249
00:13:07.428 --> 00:13:11.002
So zero, one, two, which is here,

250
00:13:11.002 --> 00:13:14.282
and then we read one, two and three.

251
00:13:14.282 --> 00:13:16.402
And so actually, in here,

252
00:13:16.402 --> 00:13:19.491
it should not be this, it would be three.

253
00:13:19.491 --> 00:13:21.204
So now, it's correct.

254
00:13:21.204 --> 00:13:23.274
So this now works with any number

255
00:13:23.274 --> 00:13:25.516
that we're gonna input in here.

256
00:13:25.516 --> 00:13:29.373
And with this, we also followed this comma rule here.

257
00:13:29.373 --> 00:13:30.923
Now, all we have to do

258
00:13:30.923 --> 00:13:35.100
is to put the plus or minus sign in front of the number,

259
00:13:35.100 --> 00:13:36.850
so let's remove this,

260
00:13:38.429 --> 00:13:40.596
and we can now use the ternary operator,

261
00:13:40.596 --> 00:13:42.748
instead of using the if statement.

262
00:13:42.748 --> 00:13:45.498
So let's say, if the type is exp,

263
00:13:49.340 --> 00:13:52.423
then the sign should be minus, right?

264
00:13:53.260 --> 00:13:57.861
Because an expense is minus, so it's negative.

265
00:13:57.861 --> 00:13:59.477
So declaring the variable,

266
00:13:59.477 --> 00:14:03.644
and if it's not, then the sign is gonna be a plus.

267
00:14:05.743 --> 00:14:06.868
And that's it.

268
00:14:06.868 --> 00:14:10.226
And now, we're ready to return our formatted string.

269
00:14:10.226 --> 00:14:13.393
So return type, so at first, the sign,

270
00:14:16.982 --> 00:14:20.638
then after that, we want a space, right?

271
00:14:20.638 --> 00:14:23.455
Then we put in the integer,

272
00:14:23.455 --> 00:14:26.998
which is now formatted with a comma, as we did before,

273
00:14:26.998 --> 00:14:31.215
and then finally, we put out the decimal part.

274
00:14:31.215 --> 00:14:34.736
So we put together all of these strings using the plus sign,

275
00:14:34.736 --> 00:14:37.478
and actually we can do it even better,

276
00:14:37.478 --> 00:14:39.990
so I'm gonna show you something very interesting.

277
00:14:39.990 --> 00:14:43.573
So let me copy this, and replace this here.

278
00:14:46.057 --> 00:14:47.374
And put a little parentheses.

279
00:14:47.374 --> 00:14:49.928
So we want this to be executed first,

280
00:14:49.928 --> 00:14:52.870
and if I don't assign this to any variable,

281
00:14:52.870 --> 00:14:56.250
then this operator here is simply going to return

282
00:14:56.250 --> 00:14:58.187
either minus or plus,

283
00:14:58.187 --> 00:14:59.378
so in this place here,

284
00:14:59.378 --> 00:15:01.998
we will have the minus if it's an expense,

285
00:15:01.998 --> 00:15:04.500
or a plus if it's an income.

286
00:15:04.500 --> 00:15:06.029
And since it's an operator,

287
00:15:06.029 --> 00:15:08.860
I can simply wrap it here in a parenthesis,

288
00:15:08.860 --> 00:15:11.588
and then it's gonna be executed first.

289
00:15:11.588 --> 00:15:14.608
All right, so we're now ready to use this,

290
00:15:14.608 --> 00:15:19.113
and let's first do it when we add a new item.

291
00:15:19.113 --> 00:15:22.328
With this down here, up here, so here.

292
00:15:22.328 --> 00:15:25.308
So instead of simply passing the object value,

293
00:15:25.308 --> 00:15:29.069
let's pass the result of formatting this number.

294
00:15:29.069 --> 00:15:31.402
So we say this.formatNumber,

295
00:15:32.325 --> 00:15:36.514
because remember, this is a method on the same object,

296
00:15:36.514 --> 00:15:39.306
and so we're gonna use the this keyboard.

297
00:15:39.306 --> 00:15:42.186
And actually, let me think about this,

298
00:15:42.186 --> 00:15:46.067
because probably we're not going to use this function here

299
00:15:46.067 --> 00:15:48.385
outside of this module, right?

300
00:15:48.385 --> 00:15:51.841
So we could as well make it a private function.

301
00:15:51.841 --> 00:15:55.817
So let me take this out of this object that we returned,

302
00:15:55.817 --> 00:15:57.865
which contains our public methods,

303
00:15:57.865 --> 00:16:01.513
and make it a private method, or a private function.

304
00:16:01.513 --> 00:16:03.846
So I'm gonna put it in here.

305
00:16:04.848 --> 00:16:06.696
And now, I need to change some things,

306
00:16:06.696 --> 00:16:09.446
so var, and equal, and all right.

307
00:16:13.145 --> 00:16:16.608
So, now we can remove the this part,

308
00:16:16.608 --> 00:16:20.525
and simply say formatNumber, and then the type.

309
00:16:24.320 --> 00:16:25.617
And that's it.

310
00:16:25.617 --> 00:16:26.896
So now, when we hit this,

311
00:16:26.896 --> 00:16:30.968
the formatNumber function will be called with our value,

312
00:16:30.968 --> 00:16:34.081
and with the type, will be formatted and returned,

313
00:16:34.081 --> 00:16:37.248
and then here, replaced in our string.

314
00:16:38.119 --> 00:16:41.015
So, it should be working now.

315
00:16:41.015 --> 00:16:44.598
So let's reload this, and add project 1500,

316
00:16:49.046 --> 00:16:50.346
and here we go.

317
00:16:50.346 --> 00:16:52.739
So we have a small problem here,

318
00:16:52.739 --> 00:16:56.787
we actually forgot to add our dot, okay?

319
00:16:56.787 --> 00:17:00.737
But besides that, it looks good, right?

320
00:17:00.737 --> 00:17:02.654
So, yeah, it's up here.

321
00:17:04.448 --> 00:17:05.864
So yeah, it's here.

322
00:17:05.864 --> 00:17:08.697
So here, we forgot to add the dot,

323
00:17:09.559 --> 00:17:12.192
but now, it should be perfect.

324
00:17:12.192 --> 00:17:14.942
So project, 1500, and here we go.

325
00:17:17.633 --> 00:17:19.216
So now, it's nicely formatted,

326
00:17:19.216 --> 00:17:22.224
such as we have it in our original,

327
00:17:22.224 --> 00:17:25.824
and another one, this time, an expense.

328
00:17:25.824 --> 00:17:28.741
So groceries were 97.56, let's say.

329
00:17:33.083 --> 00:17:35.010
And it's also nicely formatted.

330
00:17:35.010 --> 00:17:37.583
So now I'll use the minus sign and the space,

331
00:17:37.583 --> 00:17:40.015
and then everything looks great.

332
00:17:40.015 --> 00:17:42.775
So we have it here in our add item method,

333
00:17:42.775 --> 00:17:47.111
now we only need to put it here, where we show the budget.

334
00:17:47.111 --> 00:17:51.306
And that's also easy, so where is the display budget?

335
00:17:51.306 --> 00:17:52.331
Okay, so here.

336
00:17:52.331 --> 00:17:54.563
So we do the exact same thing here.

337
00:17:54.563 --> 00:17:57.730
So, formatNumber, and then the number,

338
00:18:00.851 --> 00:18:02.355
and now we need the type.

339
00:18:02.355 --> 00:18:05.471
So, we don't have the type here yet, do we?

340
00:18:05.471 --> 00:18:06.368
Because we don't know

341
00:18:06.368 --> 00:18:09.615
if the budget is gonna be negative or positive.

342
00:18:09.615 --> 00:18:11.583
So let's add an if statement here,

343
00:18:11.583 --> 00:18:14.280
or let's simply use the ternary operator.

344
00:18:14.280 --> 00:18:17.863
So let's say, obj.budget greater than zero,

345
00:18:21.775 --> 00:18:23.942
then type is gonna be inc,

346
00:18:27.210 --> 00:18:30.627
and else, it's gonna be exp, for expense.

347
00:18:32.482 --> 00:18:34.315
So type equal expense.

348
00:18:38.824 --> 00:18:41.988
Now, we have the type that we can use here.

349
00:18:41.988 --> 00:18:42.821
Okay.

350
00:18:44.789 --> 00:18:46.622
So formatNumber again,

351
00:18:48.750 --> 00:18:51.836
and here, we know that it's always gonna be positive, right,

352
00:18:51.836 --> 00:18:56.003
because it's an income, and so we want inc in here.

353
00:18:57.380 --> 00:18:59.630
And now here, formatNumber,

354
00:19:02.560 --> 00:19:05.393
and in this case, it's an expense.

355
00:19:07.601 --> 00:19:09.780
So let's check this out,

356
00:19:09.780 --> 00:19:12.106
and actually, we can already see that it's working,

357
00:19:12.106 --> 00:19:15.056
because we already have this here nicely formatted,

358
00:19:15.056 --> 00:19:17.781
because remember, this display budget method

359
00:19:17.781 --> 00:19:21.198
is already called in our innate function.

360
00:19:22.060 --> 00:19:24.560
But let's still add something.

361
00:19:27.060 --> 00:19:29.380
So yeah, it's working.

362
00:19:29.380 --> 00:19:31.445
So let's now move on to the next thing

363
00:19:31.445 --> 00:19:35.362
that we have to fix here in our user interface.

